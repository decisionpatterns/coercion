% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/can_be.R, R/which_can_be.R
\name{can_be}
\alias{can_be}
\alias{can}
\alias{which_can_be}
\alias{which_cant_be}
\alias{can_be.which}
\title{can_be}
\usage{
can_be(object, class)

can(...)

which_can_be(object, class)

which_cant_be(object, class)

can_be.which(...)
}
\arguments{
\item{object}{object;}

\item{class}{character; name of class to check if it can be coerced}
}
\value{
A logical scalar indicating whether \code{object} can be coerced to class \code{Class}

logical

\code{which_can_be} returns a integer vector of the indices of values that can be
successfully coerced to  the new class.
}
\description{
Determine if the a vector can be coerced into the given class
}
\details{
\code{can_be} determines if an object can reliably coerced to \code{class}, returning
\code{TRUE} if \strong{ALL} values can be coerced.

It uses the results of\code{try(as(...))} under the hood.  See \code{try_as()} for
details .

\code{which_can_be} provides indices of \code{object`` that **can** be coerced to the given}class\code{.}NA` can always be coerced.

\code{which_cant_be} provides indices of \code{object} that \strong{can't} be coerced to the
given \code{class}. \code{NA} can always be coerced.
}
\examples{

  nums <- seq(1.0,2.0,0.2)
  ints <- 1:5
  chrs <- letters[1:5]
  dts  <- seq( Sys.Date(), length.out=5, by="1 week") 
  posx <- as.POSIXct( dts )
 
  cls <- c('numeric','integer','character','Date','POSIXct')
  
  nums \%>\% can_be("numeric")
  nums \%>\% can_be("integer")
  nums \%>\% can_be("character")
  nums \%>\% can_be("Date")
  nums \%>\% can_be("POSIXct") 
    
  ints \%>\% can_be("numeric")
  ints \%>\% can_be("integer")
  ints \%>\% can_be("character")
  ints \%>\% can_be("Date")
  ints \%>\% can_be("POSIXct") 

  chrs \%>\% can_be("numeric")
  chrs \%>\% can_be("integer")
  chrs \%>\% can_be("character")
  chrs \%>\% can_be("Date")
  chrs \%>\% can_be("POSIXct") 

  dts \%>\% can_be("numeric")
  dts \%>\% can_be("integer")
  dts \%>\% can_be("character")
  dts \%>\% can_be("Date")
  dts \%>\% can_be("POSIXct") 
 
  posx \%>\% can_be("numeric")
  posx \%>\% can_be("integer")
  posx \%>\% can_be("character")
  posx \%>\% can_be("Date")
  posx \%>\% can_be("POSIXct") 
  


  nums <- seq(1.0,2.0,0.2)
  ints <- 1:5
  chrs <- letters[1:5]
  dts  <- seq( Sys.Date(), length.out=5, by="1 week") 
  posx <- as.POSIXct( dts )
 
  cls <- c('numeric','integer','character','Date','POSIXct')
  
  nums \%>\% which_can_be("numeric")
  nums \%>\% which_can_be("integer")
  nums \%>\% which_can_be("character")
  nums \%>\% which_can_be("Date")
  nums \%>\% which_can_be("POSIXct") 
    
  ints \%>\% which_can_be("numeric")
  ints \%>\% which_can_be("integer")
  ints \%>\% which_can_be("character")
  ints \%>\% which_can_be("Date")
  ints \%>\% which_can_be("POSIXct") 

  chrs \%>\% which_can_be("numeric")
  chrs \%>\% which_can_be("integer")
  chrs \%>\% which_can_be("character")
  chrs \%>\% which_can_be("Date")
  chrs \%>\% which_can_be("POSIXct") 

  dts \%>\% which_can_be("numeric")
  dts \%>\% which_can_be("integer")
  dts \%>\% which_can_be("character")
  dts \%>\% which_can_be("Date")
  dts \%>\% which_can_be("POSIXct") 
 
  posx \%>\% which_can_be("numeric")
  posx \%>\% which_can_be("integer")
  posx \%>\% which_can_be("character")
  posx \%>\% which_can_be("Date")
  posx \%>\% which_can_be("POSIXct") 
  
  
  x <- c( 1:3, letters[1:3], NA )
  x \%>\% which_can_be( "integer" )
  x \%>\% which_cant_be( "integer" )
  
}
\seealso{
\itemize{
\item \code{try_as()} :
\item \code{methods::as()}
\item \code{methods::canCoerce()}
\item `methods::setAs()``
}

\itemize{
\item \code{can_be()}
\item \code{base::which()}
}
}
